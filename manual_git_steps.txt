Steps to Publish Your Repository to GitHub:

1. Set the remote correctly:
   ```
   git remote remove auv
   git remote add origin https://github.com/QU-RoboSub/auv.git
   ```

2. Create a .gitignore file to exclude build artifacts:
   ```
   # Python
   __pycache__/
   *.py[cod]
   *$py.class
   *.so
   .Python
   build/
   develop-eggs/
   dist/
   downloads/
   eggs/
   .eggs/
   lib/
   lib64/
   parts/
   sdist/
   var/
   wheels/
   *.egg-info/
   .installed.cfg
   *.egg

   # ROS specific
   install/
   log/
   build/

   # Recordings - store all recordings in the dedicated folder
   # Ignore any stray recordings in the root directory
   *.avi
   *.mp4
   *.mov
   *.mkv
   *.webm

   # Dedicated recordings folder - keep the folder but ignore contents
   /recordings/*
   !/recordings/.gitkeep

   # System specific
   .DS_Store
   Thumbs.db
   ```

3. Create a dedicated recordings folder:
   ```
   mkdir -p recordings
   touch recordings/.gitkeep
   ```
   Move any existing recording files to this folder:
   ```
   mv *.avi recordings/ 2>/dev/null
   mv *.mp4 recordings/ 2>/dev/null
   mv *.mov recordings/ 2>/dev/null
   ```

4. Add and commit your changes:
   ```
   git add .gitignore recordings/
   git commit -m "Add gitignore file and dedicated recordings folder"
   ```

5. Fetch from remote:
   ```
   git fetch origin
   ```

6. Pull with rebase (or merge):
   ```
   git pull --rebase origin main
   ```
   If there are conflicts, resolve them and continue:
   ```
   git add <resolved-files>
   git rebase --continue
   ```

7. Push to GitHub:
   ```
   git push -u origin main
   ```

If you're prompted for credentials, you may need to:
- Enter your GitHub username and personal access token
- Or set up SSH keys for authentication

If you get a non-fast-forward error:
1. Try force pushing (only if you're sure you want to overwrite the remote):
   ```
   git push -f origin main
   ```
2. Or consider creating a new branch:
   ```
   git checkout -b new-main
   git push -u origin new-main
   ``` 